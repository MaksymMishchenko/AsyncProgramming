Задание 2
Создайте проект по шаблону "Console Application". Создайте свой планировщик задач,
производный от класса TaskScheduler с названием StackTaskScheduler. Ваш планировщик будет
выполнять первоочередно только поступившие задачи, то есть самые «свежие». Поэтому, внутри
него используйте для хранения задач коллекцию Stack<T>. Реализуйте добавление задачи при
запуске в вашу коллекцию.
Также, вам необходимо создать метод, который будет перебирать коллекцию задач и изымать
задачи на выполнение.
Создайте коллекцию задач из 40 задач. Каждая из задач должна вывести на экран консоли, что
она выполнилась и свой порядковый номер при запуске. Запустите все задачи в цикле с вашим
планировщиком. Посмотрите на результат работы.

Решение:
-1. Создать класс StackTaskScheduler отнаследоваться от базового класса TaskScheduler;
-2. Реализовать переопределенные абстрактные методы QueueTask(), GetSheduledTasks(), TryExecuteTaskInline();
-3. В классе StackTaskScheduler создать коллекцию Stack<Task> task = new Stack<Task>;
-4. Метод QueueTask() добавляем задачу в очередь Stack<Task> с помощью метода Push():
    - создаем переменную типа Task и присваиваем null;
    - в цикле while(true) с помощью конструкции if проверяем, если наш список не пуст, то на коллекции вызываем метод bool TryPop(out T result) и наче return;;
    - в конструкции if проверяем, если result != null, тогда запускаем задачу вызвав метод из базового класса TryExecuteTask;
-5. Метод GetSсheduledTasks() возвратить коллекцию;
-6. Метод TryExecuteTaskInline() перевызвать метод из базового класса TryExecuteTask(task); 
-7. В методе Main() с помощью класса Task создать 40 задач, которые будут запускаться в контексте вторичного потока;
-8. В теле лямбда-выражения вывести на консоль о завершении задачи и id-задачи;
-9. На экземпляре класса Task вызвать метод Start(scheduler) и передать в метод планировщик;
